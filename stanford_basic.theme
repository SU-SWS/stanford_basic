<?php

/**
 * @file
 * Preprocess functions for Stanford Basic.
 */

use Drupal\Core\Cache\CacheableMetadata;
use Drupal\Component\Utility\Html;

/**
 * Implements hook_preprocess().
 */
function stanford_basic_preprocess(&$vars, $hook) {
  // Verify ALL id attributes are unique.
  if (!empty($vars['attributes']['id'])) {
    $vars['attributes']['id'] = Html::getUniqueId($vars['attributes']['id']);
  }
}


/**
 * Prepares variables for the html.html.twig template.
 */
function stanford_basic_preprocess_html(&$variables) {
  try {
    $variables['is_front'] = \Drupal::service('path.matcher')->isFrontPage();
  }
  catch (Exception $e) {
    // If the database is not yet available, set default values for these
    // variables.
    $variables['is_front'] = FALSE;
  }

  // If we're on the front page.
  if (!$variables['is_front']) {
    // Add unique classes for each page and website section.
    $path = \Drupal::service('path.current')->getPath();
    $alias = \Drupal::service('path.alias_manager')->getAliasByPath($path);
    $alias = trim($alias, '/');
    if (!empty($alias)) {
      $name = str_replace('/', '-', $alias);
      $variables['attributes']['class'][] = 'page-' . $name;
      list($section,) = explode('/', $alias, 2);
      if (!empty($section)) {
        $variables['attributes']['class'][] = 'section-' . $section;
      }
    }
  }

  // Add cachability metadata.
  $theme_name = \Drupal::theme()->getActiveTheme()->getName();
  $theme_settings = \Drupal::config($theme_name . '.settings');
  CacheableMetadata::createFromRenderArray($variables)
    ->addCacheableDependency($theme_settings)
    ->applyTo($variables);
  // Union all theme setting variables to the html.html.twig template.
  $variables += $theme_settings->getOriginal();

  // The base path.
  $variables['base_path'] = base_path();
  $variables['stanford_basic_path'] = drupal_get_path('theme', 'stanford_basic');
}

/**
 * Prepares variables for the field.html.twig template.
 */
function stanford_basic_preprocess_field(&$variables, $hook) {
  // Make additional variables available to the template.
  $variables['bundle'] = $variables['element']['#bundle'];
  $variables['attributes']['class'][] = Html::cleanCssIdentifier($variables['entity_type']);
  $variables['attributes']['class'][] = Html::cleanCssIdentifier($variables['bundle']);
  $variables['attributes']['class'][] = Html::cleanCssIdentifier($variables['field_name']);
  $variables['attributes']['class'][] = Html::cleanCssIdentifier($variables['field_type']);
  $variables['attributes']['class'][] = Html::cleanCssIdentifier('label-' . $variables['label_display']);

  $first_item = isset($variables['element'][0]) ? $variables['element'][0] : NULL;
  $is_paragraph = isset($first_item['#paragraph']) ? $first_item['#paragraph'] : FALSE;
  $has_items = isset($variables['items']) ? count($variables['items']) : FALSE;

  // Add additional information to paragraph fields.
  // Bricks has a different field type and structures the array differently, so
  // we need to check if its actual normal paragraph fields as well.
  if ($variables['field_type'] == 'entity_reference_revisions' && $is_paragraph && $has_items) {
    foreach ($variables['items'] as &$pitem) {
      $paragraph_type = $pitem['content']['#paragraph']->getType();
      $ptype = Html::cleanCssIdentifier("ptype-" . $paragraph_type);
      if (!isset($pitem['attributes']['class'])) {
        $pitem['attributes']['class'] = [];
      }
      $pitem['attributes']['class'][] = "paragraph-item";
      $pitem['attributes']['class'][] = $ptype;
    }
  }

}

/**
 * Prepares non node/panel pages to be in a single column.
 */
function stanford_basic_preprocess_page(&$vars) {

  // Only center the container if the page is not a node and not a panel.
  $pbag = \Drupal::routeMatch()->getParameters();
  $pkeys = $pbag->keys();
  $allowed = ['node', 'page_manager_page'];

  foreach ($allowed as $key) {
    if (in_array($key, $pkeys)) {
      return;
    }
  }

  // If a key is not found center the page.
  $vars['#attached']['library'][] = "stanford_basic/centered_container";
}

/**
 * Implements hook_preprocess_block().
 */
function stanford_basic_preprocess_block(&$variables) {
  $variables['attributes']['class'][] = Html::cleanCssIdentifier(_stanford_basic_change_characters($variables['base_plugin_id']));
  $variables['attributes']['class'][] = Html::cleanCssIdentifier(_stanford_basic_change_characters($variables['derivative_plugin_id']));
}

/**
 * Implements hook_preprocess_views_view().
 */
function stanford_basic_preprocess_views_view(&$variables) {
  $variables['attributes']['class'][] = Html::cleanCssIdentifier('view');
  $variables['attributes']['class'][] = Html::cleanCssIdentifier($variables['id']);
  $variables['attributes']['class'][] = Html::cleanCssIdentifier($variables['display_id']);
}

/**
 * Html::cleanCssIdentifier() doesn't remove ":" so we have to clean a little
 * more.
 *
 * @param string $string
 *   String to clean.
 *
 * @return string
 *   Cleaned string.
 */
function _stanford_basic_change_characters($string) {
  return preg_replace("/[^a-zA-Z\d\s]/", '-', $string);
}

/**
 * Implements hook_preprocess_image().
 */
function stanford_basic_preprocess_image(&$vars) {
  // Decorative images get the role="presentation" attribute.
  if (!isset($vars['attributes']['alt'])) {
    $vars['attributes']['role'] = 'presentation';
  }
}
