<?php

/**
 * @file
 * Preprocess functions for Stanford Basic.
 */

use Drupal\Core\Cache\CacheableMetadata;
use Drupal\layout_builder\Plugin\SectionStorage\DefaultsSectionStorage;
use Drupal\Component\Utility\Html;
use Drupal\ui_patterns\UiPatterns;
use Drupal\Core\Url;

/**
 * Prepares variables for the html.html.twig template.
 */
function stanford_basic_preprocess_html(&$variables) {
  try {
    $variables['is_front'] = \Drupal::service('path.matcher')->isFrontPage();
  }
  catch (Exception $e) {
    // If the database is not yet available, set default values for these
    // variables.
    $variables['is_front'] = FALSE;
  }

  // If we're on the front page.
  if (!$variables['is_front']) {
    // Add unique classes for each page and website section.
    $path = \Drupal::service('path.current')->getPath();
    $alias = \Drupal::service('path.alias_manager')->getAliasByPath($path);
    $alias = trim($alias, '/');
    if (!empty($alias)) {
      $name = str_replace('/', '-', $alias);
      $variables['attributes']['class'][] = 'page-' . $name;
      list($section,) = explode('/', $alias, 2);
      if (!empty($section)) {
        $variables['attributes']['class'][] = 'section-' . $section;
      }
    }
  }

  // Add cachability metadata.
  $theme_name = \Drupal::theme()->getActiveTheme()->getName();
  $theme_settings = \Drupal::config($theme_name . '.settings');
  CacheableMetadata::createFromRenderArray($variables)
    ->addCacheableDependency($theme_settings)
    ->applyTo($variables);
  // Union all theme setting variables to the html.html.twig template.
  $variables += $theme_settings->getOriginal();

  // The base path.
  $variables['base_path'] = base_path();
  $variables['stanford_basic_path'] = drupal_get_path('theme', 'stanford_basic');
}

/**
 * Prepares variables for the field.html.twig template.
 */
function stanford_basic_preprocess_field(&$variables, $hook) {
  // Make additional variables available to the template.
  $variables['bundle'] = $variables['element']['#bundle'];
  $variables['attributes']['class'][] = Html::cleanCssIdentifier($variables['entity_type']);
  $variables['attributes']['class'][] = Html::cleanCssIdentifier($variables['bundle']);
  $variables['attributes']['class'][] = Html::cleanCssIdentifier($variables['field_name']);
  $variables['attributes']['class'][] = Html::cleanCssIdentifier($variables['field_type']);
  $variables['attributes']['class'][] = Html::cleanCssIdentifier('label-' . $variables['label_display']);

  $first_item = isset($variables['element'][0]) ? $variables['element'][0] : NULL;
  $is_paragraph = isset($first_item['#paragraph']) ? $first_item['#paragraph'] : FALSE;
  $has_items = isset($variables['items']) ? count($variables['items']) : FALSE;

  // Add additional information to paragraph fields.
  // Bricks has a different field type and structures the array differently, so
  // we need to check if its actual normal paragraph fields as well.
  if ($variables['field_type'] == 'entity_reference_revisions' && $is_paragraph && $has_items) {
    foreach ($variables['items'] as &$pitem) {
      $paragraph_type = $pitem['content']['#paragraph']->getType();
      $ptype = Html::cleanCssIdentifier("ptype-" . $paragraph_type);
      if (!isset($pitem['attributes']['class'])) {
        $pitem['attributes']['class'] = [];
      }
      $pitem['attributes']['class'][] = "paragraph-item";
      $pitem['attributes']['class'][] = $ptype;
    }
  }

}

/**
 * Implements hook_preprocess_block().
 */
function stanford_basic_preprocess_block(&$variables) {
  $variables['attributes']['class'][] = Html::cleanCssIdentifier(_stanford_basic_change_characters($variables['base_plugin_id']));
  $variables['attributes']['class'][] = Html::cleanCssIdentifier(_stanford_basic_change_characters($variables['derivative_plugin_id']));
}

/**
 * Implements hook_preprocess_views_view().
 */
function stanford_basic_preprocess_views_view(&$variables) {
  $variables['attributes']['class'][] = Html::cleanCssIdentifier('view');
  $variables['attributes']['class'][] = Html::cleanCssIdentifier($variables['id']);
  $variables['attributes']['class'][] = Html::cleanCssIdentifier($variables['display_id']);
}

/**
 * Html::cleanCssIdentifier() doesn't remove ":" so we have to clean a little
 * more.
 *
 * @param string $string
 *   String to clean.
 *
 * @return string
 *   Cleaned string.
 */
function _stanford_basic_change_characters($string) {
  return preg_replace("/[^a-zA-Z\d\s]/", '-', $string);
}

/**
 * Implements hook_preprocess_image().
 */
function stanford_basic_preprocess_image(&$vars) {
  // Decorative images get the role="presentation" attribute.
  if (!isset($vars['attributes']['alt'])) {
    $vars['attributes']['role'] = 'presentation';
  }
}

/**
 * Implements hook_preprocess().
 */
function stanford_basic_preprocess(&$variables, $hook) {
  $moduleHandler = \Drupal::service('module_handler');
  if (!$moduleHandler->moduleExists('ui_patterns')) {
    return;
  }

  foreach (UiPatterns::getPatternDefinitions() as $pattern_id => $pattern) {
    if (strpos($hook, $pattern_id) !== FALSE) {
      $ids = &drupal_static(__FUNCTION__, []);
      if (!isset($ids[$pattern_id])) {
        $ids[$pattern_id] = 0;
      }

      if (!isset($variables['attributes']['id'])) {
        $variables['attributes']['id'] = Html::getUniqueId($pattern_id);
      }

      $definition = $pattern->toArray();
      if (isset($variables['variant']) && isset($definition['variants'][$variables['variant']]['modifier_class'])) {
        $variables['modifier_class'] = $definition['variants'][$variables['variant']]['modifier_class'];
      }

      break;
    }
  }
}

/**
 * Implements hook_preprocess_patterns_overview_page().
 */
function stanford_basic_preprocess_patterns_overview_page(&$variables) {
  uasort($variables['patterns'], function ($pattern_a, $pattern_b) {
    return strcmp($pattern_a['label'], $pattern_b['label']);
  });
}

/**
 * Prepares non node/panel pages to be in a single column.
 */
function stanford_basic_preprocess_page(&$vars) {

  // Only center the container if the page is not a node and not a panel.
  $pbag = \Drupal::routeMatch()->getParameters();
  $pkeys = $pbag->keys();
  $blacklist = [
    'node', // Node Types.
    'page_manager_page', // Panels.
  ];

  foreach ($blacklist as $key) {
    if (in_array($key, $pkeys)) {
      return;
    }
  }

  // Do not center when using the layout builder ui.
  if (
    in_array('section_storage', $pkeys) &&
    $pbag->get('section_storage') instanceof DefaultsSectionStorage
  ) {
    return;
  }

  foreach ($vars['page']['content'] as $key => &$block) {
    // Skip any non block config.
    if (strpos($key, "#") === 0) {
      continue;
    }
    // Ensure that the item is a block.
    if (isset($block['#block'])) {
      $block['#attributes']['class'][] = 'centered-container';
    }
  }

  $variables['brand_bar_variant'] = theme_get_setting('brand_bar_variant');
}

/**
 * Pass through the lockup configuration settings.
 * @param  [type] $vars [description]
 * @return [type]       [description]
 */
function stanford_basic_preprocess_block__system_branding_block(&$vars) {
  $vars['lockup'] = theme_get_setting('lockup');
}

/**
 * Implements hook_preprocess_menu().
 */
function stanford_basic_preprocess_menu(&$variables, $hook) {
  $current_path = \Drupal::request()->getRequestUri();

  if ($variables['menu_name'] !== "main") {
    return;
  }

  foreach($variables['items'] as &$item) {
    $menu_item = [$item];
    _stanford_basic_menu_process_submenu($menu_item, $current_path);
    $item = $menu_item[0];
  }
}

/**
 * Set active and active-trail class for sub-menus recursively.
 *
 * @param  array $submenu      The `$item['below']` structure from a menu array.
 * @param  string $current_path A path to match against for "on this page".
 */
function _stanford_basic_menu_process_submenu(&$submenu, $current_path) {
  foreach ($submenu as &$item) {

    if ($item['in_active_trail']) {
      $item_path = (is_string($item['url'])) ? $item['url'] : $item['url']->toString();

      if ($item_path == $current_path) {
        $item['is_active'] = TRUE;
      }
      elseif (count($item['below'])) {
        _stanford_basic_menu_process_submenu($item['below'], $current_path);
      }
    }
  }
}
