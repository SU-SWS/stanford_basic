<?php

/**
 * @file
 * Preprocess functions for Stanford Basic.
 */

use Drupal\Core\Cache\CacheableMetadata;
use Drupal\layout_builder\Plugin\SectionStorage\DefaultsSectionStorage;
use Drupal\Component\Utility\Html;
use Drupal\Core\Url;

/**
 * Implements hook_page_attachments_alter().
 *
 * Because hook_page_attachments() is only executed in modules, not themes.
 */
function stanford_basic_page_attachments_alter(array &$attachments) {
  if (\Drupal::currentUser()->isAuthenticated()) {
    $attachments['#attached']['library'][] = 'stanford_basic/admin';
  }
  $route_match = \Drupal::routeMatch();
  if ($route_match->getRouteName() == 'user.login') {
    $attachments['#attached']['library'][] = 'stanford_basic/user_login';
  }
  // Check if dropdown menus are activated
  $attachments['#attached']['drupalSettings']['stanford_basic']['nav_dropdown_enabled'] = (bool) theme_get_setting('nav_dropdown_enabled', 'stanford_basic');
}

/**
 * Prepares variables for the html.html.twig template.
 */
function stanford_basic_preprocess_html(&$variables) {
  try {
    $variables['is_front'] = \Drupal::service('path.matcher')->isFrontPage();
  }
  catch (Exception $e) {
    // If the database is not yet available, set default values for these
    // variables.
    $variables['is_front'] = FALSE;
  }

  // If we're on the front page.
  if (!$variables['is_front']) {
    // Add unique classes for each page and website section.
    $path = \Drupal::service('path.current')->getPath();
    $alias = \Drupal::service('path_alias.manager')->getAliasByPath($path);
    $alias = trim($alias, '/');
    if (!empty($alias)) {
      $name = str_replace('/', '-', $alias);
      $variables['attributes']['class'][] = 'page-' . $name;
      [$section,] = explode('/', $alias, 2);
      if (!empty($section)) {
        $variables['attributes']['class'][] = 'section-' . $section;
      }
    }
  }

  // Add cachability metadata.
  $theme_name = \Drupal::theme()->getActiveTheme()->getName();
  $theme_settings = \Drupal::config($theme_name . '.settings');
  CacheableMetadata::createFromRenderArray($variables)
    ->addCacheableDependency($theme_settings)
    ->applyTo($variables);
  // Union all theme setting variables to the html.html.twig template.
  $variables += $theme_settings->getOriginal();

  // The base path.
  $variables['base_path'] = base_path();

  // Add global google analytics tracker if the site is on Acquia.
  if (isset($_ENV['AH_SITE_ENVIRONMENT'])) {
    $variables['add_global_ga'] = TRUE;
    if (\Drupal::moduleHandler()->moduleExists('google_analytics')) {
      $variables['ga_module_enabled'] = !empty(\Drupal::config('google_analytics.settings')
        ->get('account'));
    }
  }
}

/**
 * Prepares variables for the field.html.twig template.
 */
function stanford_basic_preprocess_field(&$variables, $hook) {
  // Make additional variables available to the template.
  $variables['bundle'] = $variables['element']['#bundle'];
  $variables['attributes']['class'][] = Html::cleanCssIdentifier($variables['entity_type']);
  $variables['attributes']['class'][] = Html::cleanCssIdentifier($variables['bundle']);
  $variables['attributes']['class'][] = Html::cleanCssIdentifier($variables['field_name']);
  $variables['attributes']['class'][] = Html::cleanCssIdentifier($variables['field_type']);
  $variables['attributes']['class'][] = Html::cleanCssIdentifier('label-' . $variables['label_display']);

  $first_item = isset($variables['element'][0]) ? $variables['element'][0] : NULL;
  $is_paragraph = isset($first_item['#paragraph']) ? $first_item['#paragraph'] : FALSE;
  $has_items = isset($variables['items']) ? count($variables['items']) : FALSE;

  // Add additional information to paragraph fields.
  // Bricks has a different field type and structures the array differently, so
  // we need to check if its actual normal paragraph fields as well.
  if ($variables['field_type'] == 'entity_reference_revisions' && $is_paragraph && $has_items) {
    foreach ($variables['items'] as &$pitem) {
      $paragraph_type = $pitem['content']['#paragraph']->getType();
      $ptype = Html::cleanCssIdentifier("ptype-" . $paragraph_type);
      if (!isset($pitem['attributes']['class'])) {
        $pitem['attributes']['class'] = [];
      }
      $pitem['attributes']['class'][] = "paragraph-item";
      $pitem['attributes']['class'][] = $ptype;
    }
  }

}

/**
 * Implements hook_preprocess_block().
 */
function stanford_basic_preprocess_block(&$variables) {
  $variables['attributes']['class'][] = Html::cleanCssIdentifier(_stanford_basic_change_characters($variables['base_plugin_id']));
  $variables['attributes']['class'][] = Html::cleanCssIdentifier(_stanford_basic_change_characters($variables['derivative_plugin_id']));
}

/**
 * Implements hook_preprocess_views_view().
 */
function stanford_basic_preprocess_views_view(&$variables) {
  $variables['attributes']['class'][] = Html::cleanCssIdentifier('view');
  $variables['attributes']['class'][] = Html::cleanCssIdentifier($variables['id']);
  $variables['attributes']['class'][] = Html::cleanCssIdentifier($variables['display_id']);
}

/**
 * Html::cleanCssIdentifier() doesn't remove ":" so we have to clean a little
 * more.
 *
 * @param string $string
 *   String to clean.
 *
 * @return string
 *   Cleaned string.
 */
function _stanford_basic_change_characters($string) {
  return isset($string) ? preg_replace("/[^a-zA-Z\d\s]/", '-', $string) : '';
}

/**
 * Implements hook_preprocess_image().
 */
function stanford_basic_preprocess_image(&$vars) {
  // Decorative images get the role="presentation" attribute.
  if (!isset($vars['attributes']['alt'])) {
    $vars['attributes']['role'] = 'presentation';
  }
}

/**
 * Implements hook_preprocess_patterns_overview_page().
 */
function stanford_basic_preprocess_patterns_overview_page(&$variables) {
  uasort($variables['patterns'], function ($pattern_a, $pattern_b) {
    return strcmp($pattern_a['label'], $pattern_b['label']);
  });
}

/**
 * Implements hook_preprocess_page().
 */
function stanford_basic_preprocess_page(&$vars) {
  // Variant setting for the brand bar.
  $bbv = theme_get_setting('brand_bar_variant');
  if ($bbv !== "none") {
    $vars['brand_bar_variant'] = 'su-brand-bar--' . $bbv;
  }

  // Prepares non node/panel pages to be in a single column.
  _stanford_basic_preprocess_not_nodes($vars);
}

/**
 * Only center the container if the page is not a node and not a panel.
 *
 * @param array $vars the page vars
 */
function _stanford_basic_preprocess_not_nodes(&$vars) {
  $pbag = \Drupal::routeMatch()->getParameters();
  $pkeys = $pbag->keys();
  $blacklist = [
    'node', // Node Types.
    'page_manager_page', // Panels.
  ];

  foreach ($blacklist as $key) {
    if (in_array($key, $pkeys)) {
      return;
    }
  }

  // Do not center when using the layout builder ui.
  if (
    in_array('section_storage', $pkeys) &&
    $pbag->get('section_storage') instanceof DefaultsSectionStorage
  ) {
    return;
  }

  foreach ($vars['page']['content'] as $key => &$block) {
    // Skip any non block config.
    if (strpos($key, "#") === 0) {
      continue;
    }
    // Ensure that the item is a block.
    if (isset($block['#block'])) {
      $block['#attributes']['class'][] = 'centered-container';
    }
  }
}

/**
 * Pass through the lockup configuration settings.
 */
function stanford_basic_preprocess_block__system_branding_block(&$vars) {
  $vars['use_logo'] = theme_get_setting('logo.use_default');
  $vars['lockup'] = theme_get_setting('lockup') ?: ['option' => 'a'];
}

/**
 * Implements hook_preprocess_menu().
 */
function stanford_basic_preprocess_menu(&$variables, $hook) {

  // This should run for every menu.
  $current_path = \Drupal::request()->getRequestUri();
  $items = $variables['items'];
  foreach ($items as $key => $item) {
    // If path is current_path, add aria-current to the link.
    if (parse_url($item['url']->toString(), PHP_URL_PATH) == $current_path) {
      $link_options = $variables['items'][$key]['url']->getOptions();
      $link_options['attributes']= [
        'aria-current' => 'true',
      ];
      $variables['items'][$key]['url']->setOptions($link_options);
      $variables['items'][$key]['attributes']['aria-current'] = 'true';
    }
  }

  // The following code should only run for the main menu.
  if ($variables['menu_name'] !== "main") {
    return;
  }
  foreach ($variables['items'] as &$item) {
    $menu_item = [$item];
    _stanford_basic_menu_process_submenu($menu_item, $current_path);
    $item = $menu_item[0];
  }
  if (theme_get_setting('nav_dropdown_enabled', 'stanford_basic')) {
    $variables['attributes']['class'][] = 'su-multi-menu--dropdowns';
  }
}

/**
 * Set active and active-trail class for sub-menus recursively.
 *
 * @param array $submenu
 *   The `$item['below']` structure from a menu array.
 * @param string $current_path
 *   A path to match against for "on this page".
 *
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 */
function _stanford_basic_menu_process_submenu(&$submenu, $current_path) {
  foreach ($submenu as &$item) {
    $item_path = (is_string($item['url'])) ? $item['url'] : $item['url']->toString();
    if ($item_path == $current_path ||
        (_stanford_basic_path_is_home($item_path) && \Drupal::service('path.matcher')->isFrontPage())) {
      $item['is_active'] = TRUE;
    }

    if ($item['url'] instanceof Url && !_stanford_basic_link_is_public($item['url'])) {
      $item['unpublished'] = TRUE;
    }

    if ($item['in_active_trail'] && count($item['below'])) {
      _stanford_basic_menu_process_submenu($item['below'], $current_path);
    }
  }
}

/**
 * Determine if a menu path corresponds to the current home page.
 *
 * @param string $path
 *   The path given for a menu entry
 *
 * @return bool
 *   TRUE if the path corresponds to the current home page.
 */
function _stanford_basic_path_is_home(string $path) {
  // account for weird paths in input
  $normal_path = strtolower(trim($path));
  $config = \Drupal::config('system.site');
  $front_uri = $config->get('page.front');
  $alias = \Drupal::service('path_alias.manager')->getAliasByPath($front_uri);

  if ($normal_path == base_path() ||
      $normal_path == $front_uri ||
      $normal_path == $alias ||
      $normal_path == '<front>') {
        return TRUE;
  }
  return FALSE;
}

/**
 * Is the given url public.
 *
 * @param \Drupal\Core\Url $url
 *   Menu link url object.
 *
 * @return bool
 *   False if the link is a node link to an unpublished link, true otherwise.
 *
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 */
function _stanford_basic_link_is_public(Url $url) {
  if ($url->isRouted() && $url->getRouteName() == 'entity.node.canonical') {
    $parameters = $url->getRouteParameters();
    /** @var \Drupal\node\NodeInterface $node */
    $node = \Drupal::entityTypeManager()->getStorage('node')->load($parameters['node']);
    if ($node) {
      return $node->isPublished();
    }
    return TRUE;
  }
  return TRUE;
}

/**
 * Implements hook_preprocess_menu_local_task().
 */
function stanford_basic_preprocess_menu_local_task(&$variables) {
  if ($variables['link']['#url']->getRouteName() == 'entity.node.version_history') {
    $variables['link']['#title'] = t('Version History');
  }
  $variables['attributes']['class'][] = strtolower(Html::cleanCssIdentifier($variables['link']['#title']));
  if ($variables['link']['#url']->getRouteName() == 'entity.node.canonical') {
    $variables['link']['#title'] = t('Page Content');
    $variables['attributes']['class'][] = 'page-content-label';
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function stanford_basic_theme_suggestions_block_alter(array &$suggestions, array $variables) {
  if ($variables['elements']['#base_plugin_id'] == 'system_menu_block') {
    if (\Drupal::entityTypeManager()->hasDefinition('taxonomy_menu')) {
      $taxonomy_menu = \Drupal::entityTypeManager()
        ->getStorage('taxonomy_menu')
        ->loadByProperties(['menu' => $variables['elements']['#derivative_plugin_id']]);
      if (!empty($taxonomy_menu)) {
        $suggestions[] = 'block__system_menu_block__filter_by';
      }
    }
  }
}

